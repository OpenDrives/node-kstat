#!/bin/bash

#
# multinode: install several concurrent versions of node in a way that's
# much lighter weight than nvm.  See usage() for usage details.
#

set -o pipefail

#
# Static configuration: Node versions to setup and test.
#
mn_versions="0.8.28 0.10.48 0.12.17 4.6.1 6.9.1"
mn_platform="sunos"
mn_arches="x64 x86"
mn_nodebase="https://nodejs.org/dist"

#
# Runtime configuration
#
mn_arg0="$(basename ${BASH_SOURCE[0]})"
mn_srcroot=`readlink -f $(dirname ${BASH_SOURCE[0]})/..`
mn_subcmd=
mn_target_dir=$mn_srcroot/node
mn_results=
mn_nerrors=0

#
# usage MESSAGE...: emit MESSAGE to stderr and exit non-zero.
#
function usage
{
	echo "$mn_arg0: $@" >&2
	cat <<EOF >&2
usage: $mn_arg0 setup
       $mn_arg0 versions
       $mn_arg0 env [ver] [[arch]]
       $mn_arg0 test
       $mn_arg0 clobber
       $mn_arg0 build

Subcommands:

    setup        sets up directory TARGET_DIR with the configured Node
                 versions by downloading official builds

    versions     lists installed versions

    env [ver]    runs bash with an environment that has \$PATH and \$NODE_PATH
                 set to the specified version

    test         runs the test suite with the configured Node versions.  You
                 should have already run "setup" with TARGET_DIR first.

    build        builds all artifacts for all versions

    clobber      deletes all built artifacts
EOF
	exit 2
}

#
# fail MESSAGE...: emit MESSAGE to stderr and exit 1
#
function fail
{
	echo "$mn_arg0: $@" >&2
	exit 1
}

function main
{
	local func

	if [[ $# -lt 1 ]]; then
		usage "missing arguments"
	fi

	cd "$mn_srcroot" || fail "failed to fetch source root"
	mn_srcroot="$(pwd)"
	cd - > /dev/null || fail "failed to fetch source root"

	mn_subcmd="$1"

	shift

	case "$mn_subcmd" in
	setup|versions|build|test|env|clobber)	do_$mn_subcmd $* ;;
	*)		usage "unknown command: \"$mn_subcmd\"" ;;
	esac
}

#
# do_setup: downloads and unpacks all configured Node versions into the target
# directory.
#
function do_setup
{
	if ! mkdir -p "$mn_target_dir"; then
		fail "failed to create \"$mn_target_dir\""
	fi

	if ! cd "$mn_target_dir"; then
		fail "failed to chdir \"$mn_target_dir\""
	fi

	for version in $mn_versions; do
		for arch in $mn_arches; do
			if ! do_setup_one \
			    "$version" "$mn_platform" "$arch"; then
				fail "failed to setup Node $version ($arch)"
			fi
		done
	done
}

#
# do_setup_one VERSION PLATFORM ARCH: download and unpack a specific Node
# version into the current directory.
#
function do_setup_one
{
	local version platform arch
	local dir file url

	version="$1"
	platform="$2"
	arch="$3"

	dir="node-v$version-$platform-$arch"
	file="$dir.tar.gz"
	url="$mn_nodebase/v$version/$file"

	if [[ -d "$dir" ]]; then
		echo "Skipping Node version $version" \
		    "($platform $arch) -- already found";
		return 0
	fi

	echo -n "Setting up Node version $version ($platform $arch) ... "

	if ! curl -fsS -o $file "$url"; then
		echo "download failed."
		return 1
	fi

	if ! tar xzf $file; then
		echo "extract failed."
		return 1
	fi

	rm -f $file
	echo "done."
}

function do_test
{
	if ! cd "$mn_target_dir" 2>/dev/null; then
		fail "failed to chdir \"$mn_target_dir\"" \
		    "(have you run \"setup\"?)"
	fi

	mn_target_dir="$(pwd)"
	cd - > /dev/null

	cd "$mn_srcroot" || fail "failed to cd \"$mn_srcroot\""

	for version in $mn_versions; do
		for arch in $mn_arches; do
			do_test_one "$version" "$mn_platform" "$arch"
		done
	done

	echo
	echo "Summary:"
	echo -e "$mn_results"
	exit "$mn_nerrors"
}

function do_test_one
{
	local version platform arch
	local dir result

	version="$1"
	platform="$2"
	arch="$3"

	dir="$mn_target_dir/node-v$version-$platform-$arch"
	if [[ ! -d "$dir" || ! -f "$dir/bin/node" ]]; then
		fail "Did not find $dir/bin/node (have you run \"setup\"?)"
	fi

	gccpath=`gcc -v 2>&1 | grep Config | tr ' ' '\n' | \
	    grep -- --prefix | cut -d= -f2`

	if [[ -z $gccpath ]]; then
		fail "gcc library location could not be determined (no gcc?)"
	fi

	echo "# $mn_arg0: === testing $version for $arch ==="

	if (
	    export PATH=$dir/bin:$PATH
	    export NODE_PATH=$mn_srcroot:$dir/lib
	    export LD_LIBRARY_PATH=$gccpath/lib
	    export LD_LIBRARY_PATH_64=$gccpath/lib/amd64
	    tape test/*.js ); then
		result="$(printf "%-7s %5s %3s: success" \
		    "$version" "$platform" "$arch")"
	else
		result="$(printf "%-7s %5s %3s: fail" \
		    "$version" "$platform" "$arch")"
		mn_nerrors=$(( mn_nerrors + 1 ))
	fi

	mn_results="$mn_results$result\n"
}

#
# do_versions: list current known versions
#
function do_versions
{
	for version in $mn_versions; do
		for arch in $mn_arches; do
			echo $version $arch
		done
	done
}

function do_env
{
	if [[ $# -lt 1 ]]; then
		usage "missing version and architecture"
	fi

	version=
	arch=
	platform=$mn_platform

	for v in $mn_versions; do
		if [[ "$v" == "$1" ]]; then
			version=$v
			break
		fi
	done

	if [[ -z $version ]]; then
		fail "$1 is not a known version (\"versions\" for all)"
	fi

	for a in $mn_arches; do
		if [[ "$a" == "$2" || $# -eq 1 ]]; then
			arch=$a
			break
		fi
	done

	if [[ -z $arch ]]; then
		fail "$2 is not a known architecture (\"versions\" for all)"
	fi

	dir="$mn_target_dir/node-v$version-$platform-$arch"
	if [[ ! -d "$dir" || ! -f "$dir/bin/node" ]]; then
		fail "Did not find $dir/bin/node (have you run \"setup\"?)"
	fi

	gccpath=`gcc -v 2>&1 | grep Config | tr ' ' '\n' | \
	    grep -- --prefix | cut -d= -f2`

	if [[ -z $gccpath ]]; then
		fail "gcc library location could not be determined (no gcc?)"
	fi

	export PS1=" "
	. ~/.profile
	. ~/.bashrc
	export PS1="[$version-$arch] $PS1"
	export PATH=$dir/bin:$PATH
	export NODE_PATH=$mn_srcroot:$dir/lib
	export LD_LIBRARY_PATH=$gccpath/lib
	export LD_LIBRARY_PATH_64=$gccpath/lib/amd64

        echo "Using bash as shell for $version environment... "
        exec bash --noprofile --norc -i
}

function do_build
{
	mn_binary=$mn_srcroot/`cat $mn_srcroot/package.json | json main`.node

	for version in $mn_versions; do
		for arch in $mn_arches; do
			do_build_one "$version" "$mn_platform" "$arch"
		done
	done
}

function do_build_one
{
	local version platform arch
	local dir result

	version="$1"
	platform="$2"
	arch="$3"
	dir="$mn_target_dir/node-v$version-$platform-$arch"
	if [[ ! -d "$dir" || ! -f "$dir/bin/node" ]]; then
		fail "Did not find $dir/bin/node (have you run \"setup\"?)"
	fi

	dest=$dir/lib/`basename $mn_binary`

	if [[ -f $dest ]]; then
		binary=`basename $mn_binary`
		echo "$mn_arg0: $version: $binary already exists for $arch"
		return
	fi

	echo $mn_arg0: === building $version for $arch ===

	export PATH=$dir/bin:$PATH

	cd $mn_srcroot
	make clobber

	if [[ -f $mn_binary ]]; then
		fail "$mn_binary exists after \"make clobber\""
	fi

	if ! make ; then
		fail "could not build $version for $arch"
	fi

	if [[ ! -f $mn_binary ]]; then
		fail "$mn_binary does not exist after \"make\""
	fi

	mv $mn_binary $dir/lib
}

function do_clobber
{
	mn_binary=$mn_srcroot/`cat $mn_srcroot/package.json | json main`.node

	for version in $mn_versions; do
		for arch in $mn_arches; do
			dir="$mn_target_dir/node-v$version-$mn_platform-$arch"

			if [[ ! -d "$dir" || ! -f "$dir/bin/node" ]]; then
				fail "Did not find $dir/bin/node (\"setup\"?)"
			fi

			dest=$dir/lib/`basename $mn_binary`

			if [[ -f $dest ]]; then
				echo $mn_arg0: clobbering $version $arch ...
				rm $dest
			fi
		done
	done
}

main "$@"
